// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basics Multi root component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>1</span>\`);
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<span>2</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(3);
    const b2 = b1.children[0] = new Block1();
    b1.children[1] = new BText(\`text\`);
    const b3 = b1.children[2] = new Block2();
    return b1;
  }
}"
`;

exports[`basics a class component inside a class component, no external dom 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>simple vnode</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics a class component inside a class component, no external dom 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics a component cannot be mounted in a detached node 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics a component inside a component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>simple vnode</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics a component inside a component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-anchor/></span>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics can be clicked on and updated 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-text/><button>Inc</button></div>\`);
    data = new Array(1);
    handlers = new Array(1);
    build() {
      this.setupHandler(this.el.firstChild.nextSibling, \`click\`, 0);
    }
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    ctx = Object.create(ctx);
    const b1 = new Block1();
    b1.data[0] = ctx['state'].counter;
    const v1 = ctx['state'];
    b1.handlers[0] = (e) => {const res = (() => { return v1.counter++ })(); if (typeof res === 'function') { res(e) }};
    return b1;
  }
}"
`;

exports[`basics can handle empty props 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].val;
    return b1;
  }
}"
`;

exports[`basics can handle empty props 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.children[0] = node.getChild(\`Child\`, {val: undefined}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics can mount a component with just some text 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return text(\`just text\`);
  }
}"
`;

exports[`basics can mount a component with no text 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call } = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    return text(\`\`);
  }
}"
`;

exports[`basics can mount a simple component 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call } = helpers;
  
  let block1 = createBlock(\`<span>simple vnode</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`basics can mount a simple component with multiple roots 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call } = helpers;
  
  let block2 = createBlock(\`<span/>\`);
  let block3 = createBlock(\`<div/>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let b2 = block2();
    let b3 = block3();
    return multi([b2, b3]);
  }
}"
`;

exports[`basics can mount a simple component with props 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call } = helpers;
  
  let block1 = createBlock(\`<span><owl-text-0/></span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    let d1 = ctx['props'].value;
    return block1([d1]);
  }
}"
`;

exports[`basics cannot mount on a documentFragment 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call } = helpers;
  
  let block1 = createBlock(\`<div>content</div>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`basics child can be updated 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BText(ctx['props'].value);
    return b1;
  }
}"
`;

exports[`basics child can be updated 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {value: ctx['state'].counter}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics class component with dynamic text 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span>My value: <owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild.nextSibling, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`basics class parent, class child component with props 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].value;
    return b1;
  }
}"
`;

exports[`basics class parent, class child component with props 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {value: 42}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics component with dynamic content can be updated 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`basics do not remove previously rendered dom if not necessary 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics do not remove previously rendered dom if not necessary, variation 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><h1>h1</h1><span><owl-text/></span></div>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild.nextSibling.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['state'].value;
    return b1;
  }
}"
`;

exports[`basics has no el after creation 1`] = `
"function anonymous(bdom, helpers
) {
  let { text, createBlock, list, multi, html } = bdom;
  let { withDefault, getTemplate, prepareList, withKey, zero, call } = helpers;
  
  let block1 = createBlock(\`<span>simple</span>\`);
  
  return function template(ctx, node, key = \\"\\") {
    return block1();
  }
}"
`;

exports[`basics higher order components parent and child 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>a</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics higher order components parent and child 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>b</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics higher order components parent and child 3`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(2);
    if (ctx['props'].child==='a') {
      b1.children[0] = node.getChild(\`ChildA\`, {}, key + \`__1\`, ctx);
    } else {
      b1.children[1] = node.getChild(\`ChildB\`, {}, key + \`__2\`, ctx);
    }
    return b1;
  }
}"
`;

exports[`basics higher order components parent and child 4`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {child: ctx['state'].child}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics parent, child and grandchild 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>hey</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics parent, child and grandchild 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`GrandChild\`, {}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics parent, child and grandchild 3`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics props is set on root component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>simple vnode</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics reconciliation alg is not confused in some specific situation 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>child</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics reconciliation alg is not confused in some specific situation 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    build() {
      this.anchors = new Array(2);
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    let key0;
    const b1 = new Block1();
    b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    key0 = 4;
    b1.children[1] = node.getChild(\`Child\`, {}, key + \`__2\`, ctx);
    return b1;
  }
}"
`;

exports[`basics same t-keys in two different places 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<span><owl-text/></span>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['props'].blip;
    return b1;
  }
}"
`;

exports[`basics same t-keys in two different places 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><div><owl-anchor/></div><div><owl-anchor/></div></div>\`);
    children = new Array(2);
    build() {
      this.anchors = new Array(2);
      const el1 = this.el.firstChild;
      this.anchors[0] = el1.firstChild;
      this.anchors[1] = el1.nextSibling.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    let key0;
    const b1 = new Block1();
    key0 = 1;
    b1.children[0] = node.getChild(\`Child\`, {blip: '1'}, key + \`__1\`, ctx);
    key0 = 1;
    b1.children[1] = node.getChild(\`Child\`, {blip: '2'}, key + \`__2\`, ctx);
    return b1;
  }
}"
`;

exports[`basics simple component with a dynamic text 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['value'];
    return b1;
  }
}"
`;

exports[`basics simple component, useState 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-text/></div>\`);
    data = new Array(1);
    update(prevData, data) {
      setText(this.el.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    b1.data[0] = ctx['state'].value;
    return b1;
  }
}"
`;

exports[`basics some simple sanity checks (el/status) 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>simple vnode</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics t-elif works with t-component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>hey</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics t-elif works with t-component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    build() {
      this.anchors = new Array(2);
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<div>somediv</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['state'].flag) {
      const b2 = b1.children[0] = new Block2();
    } else if (!ctx['state'].flag) {
      b1.children[1] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return b1;
  }
}"
`;

exports[`basics t-else with empty string works with t-component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>hey</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics t-else with empty string works with t-component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    build() {
      this.anchors = new Array(2);
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<div>somediv</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['state'].flag) {
      const b2 = b1.children[0] = new Block2();
    } else {
      b1.children[1] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return b1;
  }
}"
`;

exports[`basics t-else works with t-component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>hey</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics t-else works with t-component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    build() {
      this.anchors = new Array(2);
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  class Block2 extends BStatic {
    static el = elem(\`<div>somediv</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['state'].flag) {
      const b2 = b1.children[0] = new Block2();
    } else {
      b1.children[1] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return b1;
  }
}"
`;

exports[`basics t-if works with t-component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>hey</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics t-if works with t-component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/></div>\`);
    children = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['state'].flag) {
      b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return b1;
  }
}"
`;

exports[`basics t-key on a component with t-if, and a sibling component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>child</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics t-key on a component with t-if, and a sibling component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    build() {
      this.anchors = new Array(2);
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    let key0;
    const b1 = new Block1();
    if (false) {
      key0 = 'str';
      b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    b1.children[1] = node.getChild(\`Child\`, {}, key + \`__2\`, ctx);
    return b1;
  }
}"
`;

exports[`basics text after a conditional component 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<p>simple vnode</p>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics text after a conditional component 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><span><owl-text/></span></div>\`);
    children = new Array(1);
    data = new Array(1);
    build() {
      this.anchors = new Array(1);
      this.anchors[0] = this.el.firstChild;
    }
    update(prevData, data) {
      setText(this.anchors[0].nextSibling.firstChild, prevData[0], data[0]);
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    if (ctx['state'].hasChild) {
      b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    b1.data[0] = ctx['state'].text;
    return b1;
  }
}"
`;

exports[`basics three level of components with collapsing root nodes 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>2</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics three level of components with collapsing root nodes 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`GrandChild\`, {}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics three level of components with collapsing root nodes 3`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    return b1;
  }
}"
`;

exports[`basics throws if mounting on target=null 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<span>simple vnode</span>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics two child components 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>simple vnode</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics two child components 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(2);
    b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    b1.children[1] = node.getChild(\`Child\`, {}, key + \`__2\`, ctx);
    return b1;
  }
}"
`;

exports[`basics updating a component with t-foreach as root 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BCollection(ctx['items'], false, true);
    ctx = Object.create(ctx);
    const k1 = b1.values, v1 = b1.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`item\`] = v1[i1];
      let key1 = ctx['item'];
      b1.children[i1] = new BText(ctx['item']);
      b1.keys[i1] = key1;
    }
    return b1;
  }
}"
`;

exports[`basics widget after a t-foreach 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div/>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics widget after a t-foreach 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BElem {
    static el = elem(\`<div><owl-anchor/><owl-anchor/></div>\`);
    children = new Array(2);
    build() {
      this.anchors = new Array(2);
      this.anchors[0] = this.el.firstChild;
      this.anchors[1] = this.anchors[0].nextSibling;
    }
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    const b2 = b1.children[0] = new BCollection(Array(2), false, true);
    ctx = Object.create(ctx);
    const k1 = b2.values, v1 = b2.collection, l1 = k1.length;
    for (let i1 = 0; i1 < l1; i1++) {
      ctx[\`elem\`] = v1[i1];
      ctx[\`elem_index\`] = i1;
      let key1 = ctx['elem_index'];
      b2.children[i1] = new BText(\`txt\`);
      b2.keys[i1] = key1;
    }
    ctx = ctx.__proto__;
    b1.children[1] = node.getChild(\`SomeComponent\`, {}, key + \`__2\`, ctx);
    return b1;
  }
}"
`;

exports[`basics zero or one child components 1`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  class Block1 extends BStatic {
    static el = elem(\`<div>simple vnode</div>\`);
  }
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new Block1();
    return b1;
  }
}"
`;

exports[`basics zero or one child components 2`] = `
"function anonymous(Blocks, helpers
) {
  let {BElem, BText, BNode, BCollection, BHtml, BMulti, BStatic, BDispatch} = Blocks;
  let {elem, setText, withDefault, call, getTemplate, zero, callSlot, capture, toClassObj} = helpers;
  
  return function template(ctx, node, key = \\"\\") {
    const b1 = new BMulti(1);
    if (ctx['state'].hasChild) {
      b1.children[0] = node.getChild(\`Child\`, {}, key + \`__1\`, ctx);
    }
    return b1;
  }
}"
`;
