// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[` 1`] = `
"function anonymous(template, updateClass, handler
) {
  return {
    mountBefore(anchor) {
      this.el = template.cloneNode(true);
      let ref0 = this.el.firstChild;
      const data = this.data;
      ref0.textContent = data[0];
      this.refs = [ref0];
      anchor.before(this.el);
    },
    patch(block) {
      if (this === block) return;
      const refs = this.refs;
      const current = this.data;
      const next = block.data;
      if (next[0] !== current[0]) { refs[0].textContent = next[0]}
      this.data = next;
    }
  };
}"
`;

exports[` 2`] = `
"function anonymous(template, updateClass, handler
) {
  return {
    mountBefore(anchor) {
      this.el = template.cloneNode(true);
      let ref0 = this.el.firstChild;
      const data = this.data;
      ref0.textContent = data[0];
      this.refs = [ref0];
      anchor.before(this.el);
    },
    patch(block) {
      if (this === block) return;
      const refs = this.refs;
      const current = this.data;
      const next = block.data;
      if (next[0] !== current[0]) { refs[0].textContent = next[0]}
      this.data = next;
    }
  };
}"
`;

exports[`adding/removing elements adds children: [] => [1,2,3] (inside elem) 1`] = `
"function anonymous(template, updateClass, handler
) {
  return {
    mountBefore(anchor) {
      this.el = template.cloneNode(true);
      let ref0 = this.el.firstChild;
      const children = this.children;
      let child0 = children[0]; if (child0) { child0.mountBefore(ref0); }
      this.refs = [ref0];
      anchor.before(this.el);
    },
    patch(block) {
      if (this === block) return;
      const refs = this.refs;
      const children = this.children;
      const nextChildren = block.children;
      let child0 = children[0], nextChild0 = nextChildren[0];
      if (child0) { if (nextChild0) { child0.patch(nextChild0); } else { child0.remove(); children[0] = null; } }
      else if (nextChild0) { nextChild0.mountBefore(refs[0]); children[0] = nextChild0; }
    }
  };
}"
`;

exports[`adding/removing elements adds children: [] => [1,2,3] (inside elem, multi) 1`] = `
"function anonymous(template, updateClass, handler
) {
  return {
    mountBefore(anchor) {
      this.el = template.cloneNode(true);
      let ref0 = this.el.firstChild;
      const children = this.children;
      let child0 = children[0]; if (child0) { child0.mountBefore(ref0); }
      this.refs = [ref0];
      anchor.before(this.el);
    },
    patch(block) {
      if (this === block) return;
      const refs = this.refs;
      const children = this.children;
      const nextChildren = block.children;
      let child0 = children[0], nextChild0 = nextChildren[0];
      if (child0) { if (nextChild0) { child0.patch(nextChild0); } else { child0.remove(); children[0] = null; } }
      else if (nextChild0) { nextChild0.mountBefore(refs[0]); children[0] = nextChild0; }
    }
  };
}"
`;

exports[`adding/removing elements remove children: [1,2,3] => [] (inside elem) 1`] = `
"function anonymous(template, updateClass, handler
) {
  return {
    mountBefore(anchor) {
      this.el = template.cloneNode(true);
      let ref0 = this.el.firstChild;
      const children = this.children;
      let child0 = children[0]; if (child0) { child0.mountBefore(ref0); }
      this.refs = [ref0];
      anchor.before(this.el);
    },
    patch(block) {
      if (this === block) return;
      const refs = this.refs;
      const children = this.children;
      const nextChildren = block.children;
      let child0 = children[0], nextChild0 = nextChildren[0];
      if (child0) { if (nextChild0) { child0.patch(nextChild0); } else { child0.remove(); children[0] = null; } }
      else if (nextChild0) { nextChild0.mountBefore(refs[0]); children[0] = nextChild0; }
    }
  };
}"
`;

exports[`list block: misc patching a list block inside an elem block 1`] = `
"function anonymous(template, updateClass, handler
) {
  return {
    mountBefore(anchor) {
      this.el = template.cloneNode(true);
      let ref0 = this.el.firstChild;
      const children = this.children;
      let child0 = children[0]; if (child0) { child0.mountBefore(ref0); }
      this.refs = [ref0];
      anchor.before(this.el);
    },
    patch(block) {
      if (this === block) return;
      const refs = this.refs;
      const children = this.children;
      const nextChildren = block.children;
      let child0 = children[0], nextChild0 = nextChildren[0];
      if (child0) { if (nextChild0) { child0.patch(nextChild0); } else { child0.remove(); children[0] = null; } }
      else if (nextChild0) { nextChild0.mountBefore(refs[0]); children[0] = nextChild0; }
    }
  };
}"
`;
